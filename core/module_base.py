#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥—É–ª–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
–í—Å–µ –º–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
import json
import os
from pathlib import Path


class ModuleBase(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = config.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å')
        self.description = config.get('description', '')
        self.icon = config.get('icon', 'üìÅ')
        self.priority = config.get('priority', 999)
        self.enabled = config.get('enabled', True)
        
    @abstractmethod
    def get_commands(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–¥—É–ª—è
        –§–æ—Ä–º–∞—Ç: {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": {"–û–ø–∏—Å–∞–Ω–∏–µ": "–∫–æ–º–∞–Ω–¥–∞"}}}
        """
        pass
    
    def get_menu_structure(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        commands = self.get_commands()
        return {
            "name": self.name,
            "description": self.description,
            "icon": self.icon,
            "priority": self.priority,
            "enabled": self.enabled,
            "commands": commands
        }
    
    def validate_command(self, command: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã"""
        if not command or not isinstance(command, str):
            return False
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        dangerous_commands = ['rm -rf', 'dd if=', 'mkfs', 'fdisk']
        for dangerous in dangerous_commands:
            if dangerous in command.lower():
                return False
        
        return True
    
    def get_command_help(self, command: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
        return None
    
    def pre_execute_hook(self, command: str, description: str) -> bool:
        """–•—É–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã"""
        return True
    
    def post_execute_hook(self, command: str, description: str, result: Any) -> None:
        """–•—É–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        pass
    
    def get_module_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ"""
        return {
            "name": self.name,
            "description": self.description,
            "icon": self.icon,
            "version": getattr(self, 'version', '1.0'),
            "author": getattr(self, 'author', 'Unknown'),
            "commands_count": self._count_commands()
        }
    
    def _count_commands(self) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ –º–æ–¥—É–ª–µ"""
        commands = self.get_commands()
        count = 0
        for category in commands.values():
            if isinstance(category, dict):
                for subcategory in category.values():
                    if isinstance(subcategory, dict):
                        count += len(subcategory)
        return count


class CustomCommandsModule(ModuleBase):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, config: Dict[str, Any], custom_commands_file: str):
        super().__init__(config)
        self.custom_commands_file = custom_commands_file
        self._commands_cache = None
        self._cache_time = 0
    
    def get_commands(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.custom_commands_file):
                with open(self.custom_commands_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥: {e}")
        
        return {"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã": {"–û—à–∏–±–∫–∞": {"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å": "echo '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'"}}}
    
    def add_command(self, category: str, subcategory: str, description: str, command: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
        try:
            commands = self.get_commands()
            
            if category not in commands:
                commands[category] = {}
            
            if subcategory not in commands[category]:
                commands[category][subcategory] = {}
            
            commands[category][subcategory][description] = command
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.custom_commands_file, 'w', encoding='utf-8') as f:
                json.dump(commands, f, ensure_ascii=False, indent=2)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
            self._commands_cache = None
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False 