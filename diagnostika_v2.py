#!/usr/bin/env python3
"""
Linux Server Diagnostics TUI Tool v2.0
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""

import os
import sys
import json
import subprocess
import pyperclip
from typing import Dict, Any, List
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.text import Text
from rich.layout import Layout
from rich.live import Live
from rich.align import Align
from rich import box
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.console import Group

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
from core.module_manager import ModuleManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich –∫–æ–Ω—Å–æ–ª–∏
console = Console()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CONFIG = {
    "title": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Linux –°–µ—Ä–≤–µ—Ä–æ–≤ v2.0",
    "version": "2.0",
    "author": "–ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
    "colors": {
        "primary": "cyan",
        "secondary": "yellow", 
        "success": "green",
        "error": "red",
        "warning": "yellow",
        "info": "blue",
        "module": "magenta"
    }
}


class DiagnosticsTUIv2:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TUI —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.console = console
        self.module_manager = ModuleManager()
        self.current_menu = {}
        self.menu_stack = []
        self.selected_index = 0
        self.command_history = []
        
    def show_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        title = f" {CONFIG['title']} v{CONFIG['version']} "
        subtitle = f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(self.module_manager.modules)} "
        
        header = Panel(
            Align.center(Group(
                Text(title, style=f"bold {CONFIG['colors']['primary']}"),
                Text(subtitle, style=f"dim {CONFIG['colors']['info']}")
            )),
            style=f"bold {CONFIG['colors']['primary']}",
            box=box.DOUBLE
        )
        self.console.print(header)
        
    def show_menu(self, menu: Dict[str, Any], title: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.console.clear()
            self.show_header()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ–Ω—é
            table = Table(
                title=f" {title} ",
                show_header=False,
                box=box.ROUNDED,
                style=f"bold {CONFIG['colors']['primary']}"
            )
            
            table.add_column("–≠–ª–µ–º–µ–Ω—Ç", style="white")
            table.add_column("–¢–∏–ø", style="dim")
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
            
            menu_items = list(menu.items())
            
            for i, (key, value) in enumerate(menu_items):
                if isinstance(value, dict):
                    item_type = "üìÅ –ü–æ–¥–º–µ–Ω—é"
                    description = f"{len(value)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                else:
                    item_type = "‚ñ∂ –ö–æ–º–∞–Ω–¥–∞"
                    description = "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
                
                style = f"bold {CONFIG['colors']['secondary']}" if i == self.selected_index else "white"
                table.add_row(f"  {key}", item_type, description, style=style)
            
            self.console.print(table)
            
            # –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            help_text = Text(
                "–ù–∞–≤–∏–≥–∞—Ü–∏—è: W/S –∏–ª–∏ ‚Üë/‚Üì - –í—ã–±–æ—Ä | Enter - –í—ã–ø–æ–ª–Ω–∏—Ç—å | Q - –í—ã—Ö–æ–¥ | M - –ú–æ–¥—É–ª–∏ | H - –ò—Å—Ç–æ—Ä–∏—è",
                style=f"dim {CONFIG['colors']['info']}"
            )
            self.console.print(help_text)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                key = self.console.input("").lower()
                
                if key == 'q':
                    return
                elif key == 'm':
                    self.show_modules_menu()
                    continue
                elif key == 'h':
                    self.show_command_history()
                    continue
                elif key in ['w', 'k', '8']:  # –í–≤–µ—Ä—Ö
                    self.selected_index = max(0, self.selected_index - 1)
                elif key in ['s', 'j', '2']:  # –í–Ω–∏–∑
                    self.selected_index = min(len(menu_items) - 1, self.selected_index + 1)
                elif key in ['', 'enter', ' ']:  # Enter –∏–ª–∏ –ø—Ä–æ–±–µ–ª
                    selected_key, selected_value = menu_items[self.selected_index]
                    
                    if isinstance(selected_value, dict):
                        # –ü–æ–¥–º–µ–Ω—é
                        self.menu_stack.append((menu, title, self.selected_index))
                        self.current_menu = selected_value
                        self.selected_index = 0
                        return self.show_menu(selected_value, selected_key)
                    else:
                        # –ö–æ–º–∞–Ω–¥–∞
                        self.execute_command(selected_value, selected_key)
                        self.selected_index = 0
                        
            except KeyboardInterrupt:
                return
                
    def execute_command(self, command: str, description: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        self.console.clear()
        self.show_header()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.command_history.append({
            "command": command,
            "description": description,
            "timestamp": "now"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å datetime
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        info_panel = Panel(
            f"[bold]–ö–æ–º–∞–Ω–¥–∞:[/bold] {description}\n\n"
            f"[bold]–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold]\n"
            f"[{CONFIG['colors']['secondary']}]{command}[/{CONFIG['colors']['secondary']}]",
            title="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            style=f"bold {CONFIG['colors']['info']}"
        )
        self.console.print(info_panel)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        try:
            pyperclip.copy(command)
            self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞[/{CONFIG['colors']['success']}]")
        except Exception as e:
            self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}[/{CONFIG['colors']['error']}]")
        
        # –û–ø—Ü–∏–∏
        options_table = Table(title="–û–ø—Ü–∏–∏", show_header=False, box=box.ROUNDED)
        options_table.add_column("–û–ø—Ü–∏—è", style="white")
        options_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
        
        options_table.add_row("1", "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        options_table.add_row("2", "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å–Ω–æ–≤–∞")
        options_table.add_row("3", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        options_table.add_row("4", "–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        options_table.add_row("Q", "–í—ã—Ö–æ–¥")
        
        self.console.print(options_table)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π
        while True:
            choice = self.console.input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").lower()
            
            if choice == '1':
                self._execute_command_locally(command)
                break
            elif choice == '2':
                try:
                    pyperclip.copy(command)
                    self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å–Ω–æ–≤–∞[/{CONFIG['colors']['success']}]")
                except Exception as e:
                    self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}[/{CONFIG['colors']['error']}]")
            elif choice == '3':
                return
            elif choice == '4':
                self._add_to_custom_commands(command, description)
                break
            elif choice == 'q':
                sys.exit(0)
    
    def _execute_command_locally(self, command: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ª–æ–∫–∞–ª—å–Ω–æ"""
        self.console.print(f"[{CONFIG['colors']['warning']}]–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –ª–æ–∫–∞–ª—å–Ω–æ...[/{CONFIG['colors']['warning']}]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...", total=None)
            
            try:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=30
                )
                
                progress.update(task, completed=True)
                
                if result.returncode == 0:
                    self.console.print(f"[{CONFIG['colors']['success']}]–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:[/{CONFIG['colors']['success']}]")
                    self.console.print(result.stdout)
                else:
                    self.console.print(f"[{CONFIG['colors']['error']}]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:[/{CONFIG['colors']['error']}]")
                    self.console.print(result.stderr)
                    
            except subprocess.TimeoutExpired:
                self.console.print(f"[{CONFIG['colors']['error']}]–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è[/{CONFIG['colors']['error']}]")
            except Exception as e:
                self.console.print(f"[{CONFIG['colors']['error']}]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}[/{CONFIG['colors']['error']}]")
        
        self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _add_to_custom_commands(self, command: str, description: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if "custom" in self.module_manager.modules:
                custom_module = self.module_manager.modules["custom"]
                if hasattr(custom_module, 'add_command'):
                    category = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", default="–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã")
                    subcategory = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", default="–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ")
                    
                    if custom_module.add_command(category, subcategory, description, command):
                        self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã[/{CONFIG['colors']['success']}]")
                    else:
                        self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É[/{CONFIG['colors']['error']}]")
                else:
                    self.console.print(f"[{CONFIG['colors']['error']}]–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ[/{CONFIG['colors']['error']}]")
            else:
                self.console.print(f"[{CONFIG['colors']['error']}]–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω[/{CONFIG['colors']['error']}]")
        except Exception as e:
            self.console.print(f"[{CONFIG['colors']['error']}]–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}[/{CONFIG['colors']['error']}]")
        
        self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_modules_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏"""
        self.console.clear()
        self.show_header()
        
        modules_info = self.module_manager.get_module_info()
        
        table = Table(
            title=" –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ ",
            show_header=True,
            box=box.ROUNDED,
            style=f"bold {CONFIG['colors']['primary']}"
        )
        
        table.add_column("–ú–æ–¥—É–ª—å", style="white")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
        table.add_column("–ö–æ–º–∞–Ω–¥", style="white")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
        
        for module in modules_info:
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if module["enabled"] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            table.add_row(
                f"{module['icon']} {module['name']}",
                status,
                str(module["commands_count"]),
                module["description"]
            )
        
        self.console.print(table)
        
        help_text = Text(
            "E - –í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å | D - –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å | R - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å | Enter - –í–µ—Ä–Ω—É—Ç—å—Å—è",
            style=f"dim {CONFIG['colors']['info']}"
        )
        self.console.print(help_text)
        
        while True:
            choice = self.console.input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").lower()
            
            if choice == 'e':
                module_id = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥—É–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è")
                if self.module_manager.enable_module(module_id):
                    self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ú–æ–¥—É–ª—å {module_id} –≤–∫–ª—é—á–µ–Ω[/{CONFIG['colors']['success']}]")
                else:
                    self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å {module_id}[/{CONFIG['colors']['error']}]")
                break
            elif choice == 'd':
                module_id = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
                if self.module_manager.disable_module(module_id):
                    self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ú–æ–¥—É–ª—å {module_id} –æ—Ç–∫–ª—é—á–µ–Ω[/{CONFIG['colors']['success']}]")
                else:
                    self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å {module_id}[/{CONFIG['colors']['error']}]")
                break
            elif choice == 'r':
                self.module_manager.reload_modules()
                self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ú–æ–¥—É–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã[/{CONFIG['colors']['success']}]")
                break
            elif choice in ['', 'enter']:
                break
    
    def show_command_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        self.console.clear()
        self.show_header()
        
        if not self.command_history:
            self.console.print("[dim]–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞[/dim]")
            self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        table = Table(
            title=" –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ ",
            show_header=True,
            box=box.ROUNDED,
            style=f"bold {CONFIG['colors']['primary']}"
        )
        
        table.add_column("‚Ññ", style="white")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="dim")
        
        for i, item in enumerate(self.command_history[-10:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            table.add_row(
                str(i),
                item["description"],
                item["command"][:50] + "..." if len(item["command"]) > 50 else item["command"]
            )
        
        self.console.print(table)
        self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
            all_commands = self.module_manager.get_all_commands()
            
            if not all_commands:
                self.console.print(f"[{CONFIG['colors']['error']}]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–æ–¥—É–ª–µ–π[/{CONFIG['colors']['error']}]")
                return
            
            self.show_menu(all_commands, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
        except KeyboardInterrupt:
            self.console.print(f"\n[{CONFIG['colors']['info']}]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/{CONFIG['colors']['info']}]")
        except Exception as e:
            self.console.print(f"[{CONFIG['colors']['error']}]–û—à–∏–±–∫–∞: {e}[/{CONFIG['colors']['error']}]")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    try:
        import rich
        import pyperclip
    except ImportError as e:
        console.print(f"[red]–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–∞–∫–µ—Ç: {e}[/red]")
        console.print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install rich pyperclip")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = DiagnosticsTUIv2()
    app.run()


if __name__ == "__main__":
    main() 