#!/usr/bin/env python3
"""
Linux Server Diagnostics TUI Tool v2.0
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
import pyperclip
from typing import Dict, Any, List
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.text import Text
from rich.layout import Layout
from rich.live import Live
from rich.align import Align
from rich import box
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.console import Group

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich –∫–æ–Ω—Å–æ–ª–∏
console = Console()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CONFIG = {
    "title": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Linux –°–µ—Ä–≤–µ—Ä–æ–≤ v2.0",
    "version": "2.0",
    "author": "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
    "colors": {
        "primary": "cyan",
        "secondary": "yellow", 
        "success": "green",
        "error": "red",
        "warning": "yellow",
        "info": "blue",
        "module": "magenta"
    }
}

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
DIAGNOSTIC_COMMANDS = {
    "üåê –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏": {
        "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã": "ip addr show",
        "–°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è": "ss -tuln",
        "–¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏": "ip route show",
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DNS": "cat /etc/resolv.conf",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏": "ss -s",
        "–¢–µ—Å—Ç –ø–∏–Ω–≥–∞": "ping -c 3 8.8.8.8",
        "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞": "traceroute 8.8.8.8",
        "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏": "echo '–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: iperf3 -c speedtest.server.com'"
    },
    "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": {
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ": "uname -a",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ": "lscpu",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏": "free -h",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤": "df -h",
        "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã": "uptime",
        "–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤": "ps aux --sort=-%cpu | head -10",
        "–°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±": "systemctl list-units --type=service --state=running | head -10",
        "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã": "journalctl -n 20 --no-pager",
        "–í–µ—Ä—Å–∏—è —è–¥—Ä–∞": "uname -r"
    },
    "üíæ –ê–Ω–∞–ª–∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞": {
        "–†–∞–∑–¥–µ–ª—ã –¥–∏—Å–∫–æ–≤": "lsblk",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤": "df -h",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ inode": "df -i",
        "–¢–æ—á–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è": "mount | column -t",
        "–í–≤–æ–¥-–≤—ã–≤–æ–¥ –¥–∏—Å–∫–æ–≤": "iostat -x 1 3",
        "–ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã": "find / -type f -size +100M 2>/dev/null | head -10",
        "–ó–¥–æ—Ä–æ–≤—å–µ –¥–∏—Å–∫–æ–≤": "smartctl -a /dev/sda 2>/dev/null || echo 'Smartctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å LVM": "lvs 2>/dev/null || echo 'LVM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'"
    },
    "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏": {
        "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã": "netstat -tuln",
        "–°–ª—É–∂–±—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è": "ss -tuln",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏": "cat /etc/passwd | grep -v nologin",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ sudo": "grep -Po '^sudo.+:\K.*$' /etc/group | tr ',' '\n'",
        "–ù–µ—É–¥–∞—á–Ω—ã–µ –≤—Ö–æ–¥—ã": "journalctl -u ssh | grep 'Failed password' | tail -10",
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SSH": "grep -E '^(PermitRootLogin|PasswordAuthentication|Port)' /etc/ssh/sshd_config",
        "–°—Ç–∞—Ç—É—Å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞": "iptables -L -n 2>/dev/null || ufw status 2>/dev/null || echo '–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å SELinux": "sestatus 2>/dev/null || echo 'SELinux –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'"
    },
    "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": {
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞": "top -bn1 | grep 'Cpu(s)'",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏": "free -h",
        "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã": "uptime",
        "–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤": "ps aux --sort=-%cpu | head -10",
        "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞": "iostat -x 1 3",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏": "ss -s",
        "–í–≤–æ–¥-–≤—ã–≤–æ–¥ –¥–∏—Å–∫–æ–≤": "iotop -b -n 1 2>/dev/null || iostat -x 1 3",
        "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã": "vmstat 1 3"
    },
    "üê≥ –°—Ç–∞—Ç—É—Å Docker": {
        "–í–µ—Ä—Å–∏—è Docker": "docker --version",
        "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã": "docker ps",
        "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã": "docker ps -a",
        "–û–±—Ä–∞–∑—ã Docker": "docker images",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ Docker": "docker system df",
        "–°–µ—Ç–∏ Docker": "docker network ls",
        "–¢–æ–º–∞ Docker": "docker volume ls",
        "–ñ—É—Ä–Ω–∞–ª—ã Docker": "docker logs --tail 20 $(docker ps -q | head -1) 2>/dev/null || echo '–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤'"
    },
    "üóÑÔ∏è –°—Ç–∞—Ç—É—Å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö": {
        "–°—Ç–∞—Ç—É—Å MySQL": "systemctl status mysql 2>/dev/null || systemctl status mysqld 2>/dev/null || echo 'MySQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å PostgreSQL": "systemctl status postgresql 2>/dev/null || echo 'PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å MongoDB": "systemctl status mongod 2>/dev/null || echo 'MongoDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å Redis": "systemctl status redis 2>/dev/null || echo 'Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å Elasticsearch": "systemctl status elasticsearch 2>/dev/null || echo 'Elasticsearch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å InfluxDB": "systemctl status influxdb 2>/dev/null || echo 'InfluxDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'"
    },
    "üåç –í–µ–±-—Å–µ—Ä–≤–∏—Å—ã": {
        "–°—Ç–∞—Ç—É—Å Apache": "systemctl status apache2 2>/dev/null || systemctl status httpd 2>/dev/null || echo 'Apache –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å Nginx": "systemctl status nginx 2>/dev/null || echo 'Nginx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å PHP-FPM": "systemctl status php-fpm 2>/dev/null || systemctl status php8.1-fpm 2>/dev/null || echo 'PHP-FPM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å Node.js": "node --version 2>/dev/null || echo 'Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å PM2": "pm2 status 2>/dev/null || echo 'PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å Supervisor": "supervisorctl status 2>/dev/null || echo 'Supervisor –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'"
    },
    "üíø –°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è": {
        "–°—Ç–∞—Ç—É—Å cron": "systemctl status cron 2>/dev/null || systemctl status crond 2>/dev/null || echo 'Cron –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–ó–∞–¥–∞—á–∏ cron": "crontab -l 2>/dev/null || echo '–ù–µ—Ç –∑–∞–¥–∞—á cron'",
        "–°—Ç–∞—Ç—É—Å rsync": "which rsync && echo 'rsync –¥–æ—Å—Ç—É–ø–µ–Ω' || echo 'rsync –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å tar": "which tar && echo 'tar –¥–æ—Å—Ç—É–ø–µ–Ω' || echo 'tar –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å dd": "which dd && echo 'dd –¥–æ—Å—Ç—É–ø–µ–Ω' || echo 'dd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'",
        "–°—Ç–∞—Ç—É—Å borg": "which borg && echo 'borg –¥–æ—Å—Ç—É–ø–µ–Ω' || echo 'borg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'"
    }
}


class DiagnosticsTUIv2:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TUI –±–µ–∑ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    def __init__(self):
        self.console = console
        self.current_menu = DIAGNOSTIC_COMMANDS
        self.menu_stack = []
        self.selected_index = 0
        self.command_history = []
        
    def show_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        title = f" {CONFIG['title']} v{CONFIG['version']} "
        subtitle = f" –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.current_menu)} "
        
        header = Panel(
            Align.center(Group(
                Text(title, style=f"bold {CONFIG['colors']['primary']}"),
                Text(subtitle, style=f"dim {CONFIG['colors']['info']}")
            )),
            style=f"bold {CONFIG['colors']['primary']}",
            box=box.DOUBLE
        )
        self.console.print(header)
        
    def show_menu(self, menu: Dict[str, Any], title: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.console.clear()
            self.show_header()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ–Ω—é
            table = Table(
                title=f" {title} ",
                show_header=False,
                box=box.ROUNDED,
                style=f"bold {CONFIG['colors']['primary']}"
            )
            
            table.add_column("–≠–ª–µ–º–µ–Ω—Ç", style="white")
            table.add_column("–¢–∏–ø", style="dim")
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
            
            menu_items = list(menu.items())
            
            for i, (key, value) in enumerate(menu_items):
                if isinstance(value, dict):
                    item_type = "üìÅ –ü–æ–¥–º–µ–Ω—é"
                    description = f"{len(value)} –∫–æ–º–∞–Ω–¥"
                else:
                    item_type = "‚ñ∂ –ö–æ–º–∞–Ω–¥–∞"
                    description = "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
                
                style = f"bold {CONFIG['colors']['secondary']}" if i == self.selected_index else "white"
                table.add_row(f"  {key}", item_type, description, style=style)
            
            self.console.print(table)
            
            # –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            help_text = Text(
                "–ù–∞–≤–∏–≥–∞—Ü–∏—è: W/S –∏–ª–∏ ‚Üë/‚Üì - –í—ã–±–æ—Ä | Enter - –í—ã–ø–æ–ª–Ω–∏—Ç—å | Q - –í—ã—Ö–æ–¥ | H - –ò—Å—Ç–æ—Ä–∏—è",
                style=f"dim {CONFIG['colors']['info']}"
            )
            self.console.print(help_text)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                key = self.console.input("").lower()
                
                if key == 'q':
                    return
                elif key == 'h':
                    self.show_command_history()
                    continue
                elif key in ['w', 'k', '8']:  # –í–≤–µ—Ä—Ö
                    self.selected_index = max(0, self.selected_index - 1)
                elif key in ['s', 'j', '2']:  # –í–Ω–∏–∑
                    self.selected_index = min(len(menu_items) - 1, self.selected_index + 1)
                elif key in ['', 'enter', ' ']:  # Enter –∏–ª–∏ –ø—Ä–æ–±–µ–ª
                    selected_key, selected_value = menu_items[self.selected_index]
                    
                    if isinstance(selected_value, dict):
                        # –ü–æ–¥–º–µ–Ω—é
                        self.menu_stack.append((menu, title, self.selected_index))
                        self.current_menu = selected_value
                        self.selected_index = 0
                        return self.show_menu(selected_value, selected_key)
                    else:
                        # –ö–æ–º–∞–Ω–¥–∞
                        self.execute_command(selected_value, selected_key)
                        self.selected_index = 0
                        
            except KeyboardInterrupt:
                return
                
    def execute_command(self, command: str, description: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        self.console.clear()
        self.show_header()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.command_history.append({
            "command": command,
            "description": description,
            "timestamp": "now"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å datetime
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        info_panel = Panel(
            f"[bold]–ö–æ–º–∞–Ω–¥–∞:[/bold] {description}\n\n"
            f"[bold]–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold]\n"
            f"[{CONFIG['colors']['secondary']}]{command}[/{CONFIG['colors']['secondary']}]",
            title="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            style=f"bold {CONFIG['colors']['info']}"
        )
        self.console.print(info_panel)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        try:
            pyperclip.copy(command)
            self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞[/{CONFIG['colors']['success']}]")
        except Exception as e:
            self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}[/{CONFIG['colors']['error']}]")
        
        # –û–ø—Ü–∏–∏
        options_table = Table(title="–û–ø—Ü–∏–∏", show_header=False, box=box.ROUNDED)
        options_table.add_column("–û–ø—Ü–∏—è", style="white")
        options_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
        
        options_table.add_row("1", "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        options_table.add_row("2", "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å–Ω–æ–≤–∞")
        options_table.add_row("3", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        options_table.add_row("Q", "–í—ã—Ö–æ–¥")
        
        self.console.print(options_table)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π
        while True:
            choice = self.console.input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").lower()
            
            if choice == '1':
                self._execute_command_locally(command)
                break
            elif choice == '2':
                try:
                    pyperclip.copy(command)
                    self.console.print(f"[{CONFIG['colors']['success']}]‚úì –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å–Ω–æ–≤–∞[/{CONFIG['colors']['success']}]")
                except Exception as e:
                    self.console.print(f"[{CONFIG['colors']['error']}]‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}[/{CONFIG['colors']['error']}]")
            elif choice == '3':
                return
            elif choice == 'q':
                sys.exit(0)
    
    def _execute_command_locally(self, command: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ª–æ–∫–∞–ª—å–Ω–æ"""
        self.console.print(f"[{CONFIG['colors']['warning']}]–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –ª–æ–∫–∞–ª—å–Ω–æ...[/{CONFIG['colors']['warning']}]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...", total=None)
            
            try:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=30
                )
                
                progress.update(task, completed=True)
                
                if result.returncode == 0:
                    self.console.print(f"[{CONFIG['colors']['success']}]–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:[/{CONFIG['colors']['success']}]")
                    self.console.print(result.stdout)
                else:
                    self.console.print(f"[{CONFIG['colors']['error']}]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:[/{CONFIG['colors']['error']}]")
                    self.console.print(result.stderr)
                    
            except subprocess.TimeoutExpired:
                self.console.print(f"[{CONFIG['colors']['error']}]–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è[/{CONFIG['colors']['error']}]")
            except Exception as e:
                self.console.print(f"[{CONFIG['colors']['error']}]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}[/{CONFIG['colors']['error']}]")
        
        self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_command_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        self.console.clear()
        self.show_header()
        
        if not self.command_history:
            self.console.print("[dim]–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞[/dim]")
            self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        table = Table(
            title=" –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ ",
            show_header=True,
            box=box.ROUNDED,
            style=f"bold {CONFIG['colors']['primary']}"
        )
        
        table.add_column("‚Ññ", style="white")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="dim")
        
        for i, item in enumerate(self.command_history[-10:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            table.add_row(
                str(i),
                item["description"],
                item["command"][:50] + "..." if len(item["command"]) > 50 else item["command"]
            )
        
        self.console.print(table)
        self.console.input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç TUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            self.show_menu(self.current_menu, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
        except KeyboardInterrupt:
            self.console.print(f"\n[{CONFIG['colors']['info']}]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/{CONFIG['colors']['info']}]")
        except Exception as e:
            self.console.print(f"[{CONFIG['colors']['error']}]–û—à–∏–±–∫–∞: {e}[/{CONFIG['colors']['error']}]")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    try:
        import rich
        import pyperclip
    except ImportError as e:
        console.print(f"[red]–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–∞–∫–µ—Ç: {e}[/red]")
        console.print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install rich pyperclip")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = DiagnosticsTUIv2()
    app.run()


if __name__ == "__main__":
    main() 