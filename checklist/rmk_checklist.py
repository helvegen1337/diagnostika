#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagnostika RMK - –ß–µ–∫-–õ–∏—Å—Ç –†–ú–ö
–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
"""

import os
import sys
import json
import datetime
from typing import List, Dict, Any
import paramiko
import mysql.connector
from mysql.connector import Error
import requests
import socket
import subprocess
import threading
import time

class RMKChecklist:
    def __init__(self):
        self.config = self.load_config()
        self.results = []
        self.cash_ip = None
        self.cash_username = None
        self.cash_password = None
        self.server_ip = None
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "database": {
                "host": "localhost",
                "port": 3306,
                "user": "netroot",
                "password": "netroot",
                "database": "cashdb"
            },
            "paths": {
                "ncash_ini": "/opt/linuxcash/cash/conf/ncash.ini",
                "egais_xml": "/opt/linuxcash/cash/conf/plugins/egais_plugins.xml",
                "puppet_ini": "/opt/linuxcash/cash/conf/puppet/markedgoods.ini"
            },
            "ports": {
                "cash": [7795, 5900, 80, 28085, 22],
                "server": [8080, 8084, 10001, 8140]
            },
            "repositories": [
                "http://update.artix.su/bionic",
                "http://update.artix.su/jammy",
                "https://download.docker.com/linux/ubuntu",
                "http://archive.ubuntu.com/ubuntu",
                "http://security.ubuntu.com/ubuntu"
            ]
        }
        
        config_file = "config/rmk_config.json"
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return default_config
        return default_config
    
    def get_user_input(self) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –†–ú–ö")
        print("=" * 60)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–µ
        print("\nüì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞—Å—Å–µ:")
        self.cash_ip = input("IP –∞–¥—Ä–µ—Å –∫–∞—Å—Å—ã: ").strip()
        self.cash_username = input("–õ–æ–≥–∏–Ω: ").strip()
        self.cash_password = input("–ü–∞—Ä–æ–ª—å: ").strip()
        
        # IP —Å–µ—Ä–≤–µ—Ä–∞
        print("\nüñ•Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:")
        self.server_ip = input("IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: ").strip()
        
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!")
    
    def show_menu(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("\n" + "=" * 60)
        print("           –ß–ï–ö-–õ–ò–°–¢ –†–ú–ö - –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print("=" * 60)
        print("1.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∫–∞—Å—Å—ã")
        print("2.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞")
        print("3.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        print("4.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤")
        print("5.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç")
        print("6.  –ü—Ä–æ–≤–µ—Ä–∫–∞ Puppet")
        print("7.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")
        print("8.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–ú –ß–ó")
        print("9.  –ü—Ä–æ–≤–µ—Ä–∫–∞ EGAIS")
        print("10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
        print("11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
        print("12. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂")
        print("13. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–æ–ª–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π")
        print("14. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ú–µ–Ω—é")
        print("15. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        print("16. –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ XDTool (8 –ø—É–Ω–∫—Ç–æ–≤)")
        print("17. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("18. –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("0.  –í—ã—Ö–æ–¥")
        print("=" * 60)
    
    def get_check_choice(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (0-18): ").strip()
    
    def run_single_check(self, check_number: int) -> None:
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print(f"\nüîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ #{check_number}")
        print("=" * 40)
        
        if check_number == 1:
            self.check_cash_ports()
        elif check_number == 2:
            self.check_server_ports()
        elif check_number == 3:
            self.check_repositories()
        elif check_number == 4:
            self.check_tax_mapping()
        elif check_number == 5:
            self.check_payment_mapping()
        elif check_number == 6:
            self.check_puppet()
        elif check_number == 7:
            self.check_marking_plugin()
        elif check_number == 8:
            self.check_lm_chz()
        elif check_number == 9:
            self.check_egais()
        elif check_number == 10:
            self.check_operational_sales()
        elif check_number == 11:
            self.check_dictionary_loading()
        elif check_number == 12:
            self.check_sales_upload()
        elif check_number == 13:
            self.check_roles_actions()
        elif check_number == 14:
            self.check_menu_integrity()
        elif check_number == 15:
            self.check_hardware()
        elif check_number == 16:
            self.check_xdtool()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    def run_multiple_checks(self) -> None:
        """–ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("\nüìã –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5,7)")
        choices = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        try:
            check_numbers = [int(x.strip()) for x in choices.split(',')]
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {len(check_numbers)} –ø—Ä–æ–≤–µ—Ä–æ–∫...")
            
            for check_num in check_numbers:
                if 1 <= check_num <= 16:
                    self.run_single_check(check_num)
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_num}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
            if len(check_numbers) <= 3:
                self.print_results_console()
            else:
                self.generate_report_file()
                
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞")
    
    def run_all_checks(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –†–ú–ö...")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        all_checks = list(range(1, 17))  # 1-16
        
        for check_num in all_checks:
            self.run_single_check(check_num)
        
        self.generate_report_file()
    
    def check_cash_ports(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∫–∞—Å—Å—ã"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∫–∞—Å—Å—ã...")
        
        if not all([self.cash_ip, self.cash_username, self.cash_password]):
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–µ")
            return
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSH
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(self.cash_ip, username=self.cash_username, password=self.cash_password, timeout=10)
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞—Å—Å–µ {self.cash_ip} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
            for port in self.config["ports"]["cash"]:
                result = self.check_port_on_remote(ssh, "localhost", port)
                self.results.append({
                    "check": "–ü–æ—Ä—Ç—ã –∫–∞—Å—Å—ã",
                    "port": port,
                    "status": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if result else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "details": f"–ü–æ—Ä—Ç {port} –Ω–∞ –∫–∞—Å—Å–µ"
                })
            
            ssh.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–µ: {e}")
            self.results.append({
                "check": "–ü–æ—Ä—Ç—ã –∫–∞—Å—Å—ã",
                "status": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "details": str(e)
            })
    
    def check_server_ports(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        if not self.server_ip:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω IP —Å–µ—Ä–≤–µ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –∫–∞—Å—Å—ã
        for port in self.config["ports"]["server"]:
            result = self.check_port_local(self.server_ip, port)
            self.results.append({
                "check": "–ü–æ—Ä—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞",
                "port": port,
                "status": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if result else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "details": f"–ü–æ—Ä—Ç {port} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.server_ip}"
            })
    
    def check_repositories(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        
        for repo in self.config["repositories"]:
            result = self.check_repository(repo)
            self.results.append({
                "check": "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏",
                "repository": repo,
                "status": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if result else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "details": repo
            })
    
    def check_port_on_remote(self, ssh: paramiko.SSHClient, host: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ"""
        try:
            stdin, stdout, stderr = ssh.exec_command(f"nc -z {host} {port}")
            return stdout.channel.recv_exit_status() == 0
        except:
            return False
    
    def check_port_local(self, host: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((host, port))
            sock.close()
            return result == 0
        except:
            return False
    
    def check_repository(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            response = requests.get(url, timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def check_tax_mapping(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–°–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_payment_mapping(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–°–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_puppet(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Puppet"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Puppet...")
        
        if not all([self.cash_ip, self.cash_username, self.cash_password]):
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–µ")
            return
        
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(self.cash_ip, username=self.cash_username, password=self.cash_password, timeout=10)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping puppet
            stdin, stdout, stderr = ssh.exec_command("ping -c 1 puppet")
            if stdout.channel.recv_exit_status() == 0:
                print("‚úÖ Puppet –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
                self.results.append({
                    "check": "Puppet ping",
                    "status": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
                    "details": "Puppet –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping"
                })
            else:
                print("‚ö†Ô∏è  Puppet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping, –ø—Ä–æ–≤–µ—Ä—è–µ–º /etc/hosts")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ /etc/hosts
                stdin, stdout, stderr = ssh.exec_command("grep puppet /etc/hosts")
                hosts_content = stdout.read().decode().strip()
                if hosts_content:
                    print(f"‚úÖ Puppet –Ω–∞–π–¥–µ–Ω –≤ /etc/hosts: {hosts_content}")
                    self.results.append({
                        "check": "Puppet /etc/hosts",
                        "status": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": f"–ó–∞–ø–∏—Å—å –≤ /etc/hosts: {hosts_content}"
                    })
                else:
                    print("‚ùå Puppet –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ /etc/hosts")
                    self.results.append({
                        "check": "Puppet /etc/hosts",
                        "status": "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": "Puppet –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ /etc/hosts"
                    })
            
            # –ó–∞–ø—É—Å–∫ puppet agent --debug
            print("üîç –ó–∞–ø—É—Å–∫ puppet agent --debug...")
            stdin, stdout, stderr = ssh.exec_command("puppet agent --debug", timeout=30)
            puppet_output = stdout.read().decode()
            puppet_errors = stderr.read().decode()
            
            if "Finished catalog run" in puppet_output:
                print("‚úÖ Puppet –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.results.append({
                    "check": "Puppet agent",
                    "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
                    "details": "Puppet agent –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫"
                })
            else:
                print("‚ùå –û—à–∏–±–∫–∏ –≤ Puppet")
                self.results.append({
                    "check": "Puppet agent",
                    "status": "‚ùå –û—à–∏–±–∫–∏",
                    "details": puppet_errors[:200] + "..." if len(puppet_errors) > 200 else puppet_errors
                })
            
            ssh.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Puppet: {e}")
            self.results.append({
                "check": "Puppet",
                "status": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "details": str(e)
            })
    
    def check_marking_plugin(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–ü–ª–∞–≥–∏–Ω –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_lm_chz(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–ú –ß–ó"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–ú –ß–ó...")
        
        if not all([self.cash_ip, self.cash_username, self.cash_password]):
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–µ")
            return
        
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(self.cash_ip, username=self.cash_username, password=self.cash_password, timeout=10)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ dpkg
            stdin, stdout, stderr = ssh.exec_command("dpkg -l | grep regime")
            regime_packages = stdout.read().decode().strip()
            
            if regime_packages:
                print("‚úÖ –ü–∞–∫–µ—Ç—ã –õ–ú –ß–ó —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                self.results.append({
                    "check": "–õ–ú –ß–ó —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
                    "status": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    "details": f"–ù–∞–π–¥–µ–Ω—ã –ø–∞–∫–µ—Ç—ã: {regime_packages}"
                })
            else:
                print("‚ùå –ü–∞–∫–µ—Ç—ã –õ–ú –ß–ó –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.results.append({
                    "check": "–õ–ú –ß–ó —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
                    "status": "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    "details": "–ü–∞–∫–µ—Ç—ã regime –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ ready
            stdin, stdout, stderr = ssh.exec_command("grep -r 'ready' /var/log/ | grep -i regime | tail -5")
            logs_ready = stdout.read().decode().strip()
            
            if logs_ready:
                print("‚úÖ –õ–ú –ß–ó –≥–æ—Ç–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö)")
                self.results.append({
                    "check": "–õ–ú –ß–ó –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
                    "status": "‚úÖ –ì–æ—Ç–æ–≤",
                    "details": "–ù–∞–π–¥–µ–Ω–æ 'ready' –≤ –ª–æ–≥–∞—Ö"
                })
            else:
                print("‚ö†Ô∏è  'ready' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                # –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                stdin, stdout, stderr = ssh.exec_command(f"grep -o 'token.*=.*' {self.config['paths']['ncash_ini']} | head -1")
                token_line = stdout.read().decode().strip()
                
                if token_line:
                    token = token_line.split('=')[1].strip()
                    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    init_command = f'''curl -X POST "172.20.0.16:5995/api/v1/init" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Basic YWRtaW46YWRtaW4=" \
                        -d '{{"token": "{token}"}}' '''
                    
                    stdin, stdout, stderr = ssh.exec_command(init_command)
                    response = stdout.read().decode().strip()
                    
                    if "ready" in response.lower():
                        print("‚úÖ –õ–ú –ß–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        self.results.append({
                            "check": "–õ–ú –ß–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
                            "status": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
                            "details": "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 'ready'"
                        })
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –õ–ú –ß–ó: {response}")
                        self.results.append({
                            "check": "–õ–ú –ß–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
                            "status": "‚ùå –û—à–∏–±–∫–∞",
                            "details": f"–û—Ç–≤–µ—Ç: {response}"
                        })
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    self.results.append({
                        "check": "–õ–ú –ß–ó —Ç–æ–∫–µ–Ω",
                        "status": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω",
                        "details": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                    })
            
            ssh.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –õ–ú –ß–ó: {e}")
            self.results.append({
                "check": "–õ–ú –ß–ó",
                "status": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "details": str(e)
            })
    
    def check_egais(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ EGAIS"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ EGAIS...")
        
        if not all([self.cash_ip, self.cash_username, self.cash_password]):
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–µ")
            return
        
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(self.cash_ip, username=self.cash_username, password=self.cash_password, timeout=10)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ egais_plugins.xml
            stdin, stdout, stderr = ssh.exec_command(f"test -f {self.config['paths']['egais_xml']} && echo 'exists'")
            if stdout.read().decode().strip() == 'exists':
                print("‚úÖ –§–∞–π–ª egais_plugins.xml –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ò–ü —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º :8080
                stdin, stdout, stderr = ssh.exec_command(f"grep -o '[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+:8080' {self.config['paths']['egais_xml']}")
                ip_entries = stdout.read().decode().strip()
                
                if ip_entries:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ò–ü —Å –ø–æ—Ä—Ç–æ–º 8080: {ip_entries}")
                    self.results.append({
                        "check": "EGAIS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                        "status": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": f"–ù–∞–π–¥–µ–Ω—ã –ò–ü: {ip_entries}"
                    })
                else:
                    print("‚ùå –ò–ü —Å –ø–æ—Ä—Ç–æ–º 8080 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.results.append({
                        "check": "EGAIS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                        "status": "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": "–ò–ü —Å –ø–æ—Ä—Ç–æ–º 8080 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                    })
            else:
                print("‚ùå –§–∞–π–ª egais_plugins.xml –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.results.append({
                    "check": "EGAIS —Ñ–∞–π–ª",
                    "status": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω",
                    "details": f"–§–∞–π–ª {self.config['paths']['egais_xml']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                })
            
            ssh.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ EGAIS: {e}")
            self.results.append({
                "check": "EGAIS",
                "status": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "details": str(e)
            })
    
    def check_operational_sales(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
            connection = mysql.connector.connect(
                host=self.config["database"]["host"],
                port=self.config["database"]["port"],
                user=self.config["database"]["user"],
                password=self.config["database"]["password"],
                database=self.config["database"]["database"]
            )
            
            if connection.is_connected():
                cursor = connection.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã macros
                cursor.execute("SELECT * FROM macros WHERE name LIKE '%–ø–æ—á–µ–∫–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞%'")
                macros_results = cursor.fetchall()
                
                if macros_results:
                    print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '–ø–æ—á–µ–∫–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞' –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ macros")
                    self.results.append({
                        "check": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ - macros",
                        "status": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(macros_results)}"
                    })
                else:
                    print("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä '–ø–æ—á–µ–∫–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ macros")
                    self.results.append({
                        "check": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ - macros",
                        "status": "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": "–ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ macros"
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è
                cursor.execute("SHOW TABLES LIKE '—Å–æ–±—ã—Ç–∏—è'")
                if cursor.fetchone():
                    cursor.execute("SELECT COUNT(*) FROM —Å–æ–±—ã—Ç–∏—è")
                    events_count = cursor.fetchone()[0]
                    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '—Å–æ–±—ã—Ç–∏—è' –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø–∏—Å–µ–π: {events_count}")
                    self.results.append({
                        "check": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ - —Å–æ–±—ã—Ç–∏—è",
                        "status": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {events_count}"
                    })
                else:
                    print("‚ùå –¢–∞–±–ª–∏—Ü–∞ '—Å–æ–±—ã—Ç–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    self.results.append({
                        "check": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ - —Å–æ–±—ã—Ç–∏—è",
                        "status": "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        "details": "–¢–∞–±–ª–∏—Ü–∞ '—Å–æ–±—ã—Ç–∏—è' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    })
                
                cursor.close()
                connection.close()
                
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            self.results.append({
                "check": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ - –ë–î",
                "status": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "details": str(e)
            })
    
    def check_dictionary_loading(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_sales_upload(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–∞–∂",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_roles_actions(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–æ–ª–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–æ–ª–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–æ–ª–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_menu_integrity(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ú–µ–Ω—é"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ú–µ–Ω—é...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.results.append({
            "check": "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ú–µ–Ω—é",
            "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        })
    
    def check_hardware(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
        print("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        
        equipment_types = ["–°–∫–∞–Ω–µ—Ä", "–§–†", "–ü–∏–Ω–ø–∞–¥", "–í–µ—Å—ã", "–î–ü"]
        
        for equipment in equipment_types:
            print(f"\n{equipment}:")
            model = input(f"  –ú–æ–¥–µ–ª—å {equipment.lower()}–∞: ").strip()
            protocol = input(f"  –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ").strip()
            
            if model and protocol:
                print(f"  ‚úÖ {equipment} –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω")
                self.results.append({
                    "check": f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - {equipment}",
                    "status": "‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    "details": f"–ú–æ–¥–µ–ª—å: {model}, –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}"
                })
            else:
                print(f"  ‚ö†Ô∏è  {equipment} –ø—Ä–æ–ø—É—â–µ–Ω")
    
    def check_xdtool(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ XDTool"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ XDTool...")
        print("8 –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∏–º–∏—Ç–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π –∫–∞—Å—Å–∏—Ä–∞:")
        
        xdtool_checks = [
            "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Å—ã",
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞",
            "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏",
            "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏",
            "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π",
            "–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞",
            "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã",
            "–ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞"
        ]
        
        for i, check in enumerate(xdtool_checks, 1):
            print(f"{i}. {check}")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ xdtool
            self.results.append({
                "check": f"XDTool - {check}",
                "status": "‚ö†Ô∏è  –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
                "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å xdtool"
            })
    
    def print_results_console(self) -> None:
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "=" * 60)
        print("                    –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–û–ö")
        print("=" * 60)
        
        for result in self.results:
            print(f"\n{result['check']}: {result['status']}")
            if 'details' in result:
                print(f"  –î–µ—Ç–∞–ª–∏: {result['details']}")
    
    def generate_report_file(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞-–æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"reports/rmk_report_{timestamp}.txt"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("reports", exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\n")
            f.write("                    –û–¢–ß–ï–¢ –ü–†–û–í–ï–†–û–ö –†–ú–ö\n")
            f.write("=" * 60 + "\n")
            f.write(f"–î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ö–∞—Å—Å–∞: {self.cash_ip}\n")
            f.write(f"–°–µ—Ä–≤–µ—Ä: {self.server_ip}\n")
            f.write("=" * 60 + "\n\n")
            
            for result in self.results:
                f.write(f"{result['check']}: {result['status']}\n")
                if 'details' in result:
                    f.write(f"  –î–µ—Ç–∞–ª–∏: {result['details']}\n")
                f.write("\n")
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    
    def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ß–µ–∫-–õ–∏—Å—Ç –†–ú–ö...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.get_user_input()
        
        while True:
            self.show_menu()
            choice = self.get_check_choice()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "17":
                self.run_all_checks()
                break
            elif choice == "18":
                self.run_multiple_checks()
                break
            elif choice.isdigit() and 1 <= int(choice) <= 16:
                self.run_single_check(int(choice))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if len(self.results) <= 3:
                    self.print_results_console()
                else:
                    self.generate_report_file()
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    try:
        checklist = RMKChecklist()
        checklist.run()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 